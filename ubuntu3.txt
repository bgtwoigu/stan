1.系统调用：
	访问内核的唯一手段，通过软中断实现，促使系统切换到内核态去执行“异常处理程序”(即产生"系统调用相应处理程序"这个动作)
	
	User用户、System系统、Fast Interrupt快速中断、Interrupt中断、Supervisor管理、Abort中止、Undefined未定义
	
	用户模式，运行应用程序的普通模式。限制你的内存访问并且你不能直接读取硬件设备。 
	超级用户模式(SVC 模式)，主要用于 SWI(软件中断)和 OS(操作系统)。这个模式有额外的特权，允许你进一步控制计算机。例如，你必须进入超级用户模式来读取一个插件(podule)。这不能在用户模式下完成。
	中断模式(IRQ 模式)，用来处理发起中断的外设。这个模式也是有特权的。导致 IRQ 的设备有键盘、 VSync (在发生屏幕刷新的时候)、IOC 定时器、串行口、硬盘、软盘、等等...
	快速中断模式(FIQ 模式)，用来处理发起快速中断的外设。这个模式是有特权的。导致 FIQ 的设备有处理数据的软盘，串行端口(比如在 82C71x 机器上的 A5000) 和 Econet。
	IRQ 和 FIQ 之间的区别是对于 FIQ 你必须尽快处理你事情并离开这个模式。IRQ 可以被 FIQ 所中断但 IRQ 不能中断 FIQ。为了使 FIQ 更快，所以有更多的影子寄存器。FIQ 不能调用 SWI。FIQ 还必须禁用中断。
	如果一个 FIQ 例程必须重新启用中断，则它太慢了并应该是 IRQ 而不是 FIQ。 
	
2.linux的中断和队列
	cat /proc/interrupts 查看现有产生的中断的详细信息
	中断号-irq申请的编号 ， ，中断标志，dev_id-共享中断时的cookie data-通常用于区分共享中断具体由哪个设备发起
	
	通常，顶半部实现登记中断和一些必要寄存器的读取，更繁重的任务留在底半部进行处理，顶半部不能被新的中断打断，底半部可以被新的中断打断
	
	中断申请处理函数：在open函数中执行
	return 正常返回0 不正常返回对应错误信息
	int request_threaded_irq(unsigned int irq, irq_handler_t handler, irq_handler_t thread_fn, unsigned long irqflags, const char*devname, void *dev_id)
	handler是顶半部处理函数，当其返回值为IRQ_WAKE_THREAD时激活回调，不能被打断，thread_fn是底半部函数，以线程方式运行，可以被打断
	
	irqflags的常见设置：
	IRQF_DISABLED ：当置位了, 这表示一个“快速”中断处理. 快速处理在当前处理器上禁止中断来执行.
	IRQF_SHARED ：这个位表示中断可以在设备间共享. 
 	IRQF_SAMPLE_RANDOM ：这个位表示产生的中断能够有贡献给 /dev/random 和 /dev/urandom 使用的加密池，通常不应该被置位
	irqflags 普通中断
	
	void enable_irq(int irq)     使能中断
	void disable_irq(int irq)    屏蔽中断	
	void local_irq_enable(void)  使能本地中断
	void local_irq_disable(void)  屏蔽本地中断
	void free_irq(unsigned int irq，void *dev_id) 释放终端 在close函数中执行
	
	顶半部处理方式
	工作在中断上下文中，且本地cpu的中断处于关闭状态，顶半部处理函数handler会禁止本地中断，不能有任何enable/disable本地中断的动作，
	不能调用任何可能产生睡眠的函数，不应该做需要长时间的处理。否则可能导致系统崩溃。	
	
	底半部处理方式
	可以工作在中断或者进程上下文中，可以被打断，通常的实现方式有tasklet, 工作队列和软中断。
	tasklet：运行在中断上下文中
	工作队列：运行在进程上下文中
	软中断：运行在中断上下文中，通常不会直接使用
	
3.linux的并发和竞态
	概念：
		并发：竞态：死锁：
	常见情况：
		多核cpu之间，进程之间，中断与进程之间
	solution：
		互斥访问，互斥机制
	
	互斥机制：
		ATOMIC：适用于单个整型变量
		自旋锁：CPU进入忙碌状态，该过程不要太长，主要用于多核和单核可抢占的系统中
			读写自旋锁：读与写互斥，写与写互斥，可同时多个读操作并行
			顺序锁：使得在写锁被占用时也可以获取读锁，当写内容很多时会导致读性能下降会重新读，当读期间发生了写操作，会重读数据以保证数据完整
		信号量：本质上是一个整数值，和一对函数P-V联合使用，希望进入临界区的进程调用P；如果信号量的值大于零，则该值会减小1，
				进而可以访问共享资源。相反，如果信号量的值为零或为负，进程必须等待直到其他进程释放该信号量。对信号量解锁通过调用V完成；该函数增加信号量的值，并唤醒等待的进程
			多个进程可同时占据临界区，只能用在进程上下文，临界区可以包含延时睡眠等阻塞操作
		互斥体：功能类似于信号量，临界可阻塞，不能用于中断，但只有一个进程可以进入临界区
	
	互斥机制的选择：
		1.单个整型变量，ATOMIC
		2.中断要访问共享资源，自旋锁
		3.访问共享资源会发生阻塞情况的，信号量和互斥体，后者使用较多，带有_interruptible结尾的需要判断返回值来排除信号可能被唤醒的可能
		
		自旋锁详细分类：
		只在进程上下文和软中断上下文：spin_lock_bh/spin_unlock_bh
		只在一个tasklet或者timer上下文：不需要自旋锁
		两个或以上tasklet或timer上下文：spin_lock/spin_unlock
		只在一个软中断上下文(除去tasklet和timer)：spin_lock/spin_unlock
		多个软中断上下文(除去tasklet和timer):spin_lock/spin_unlock
		在软、硬中断(包括tasklet和timer)，进程上下文和硬中断上下文：spin_lock_irq/spin_unlock_irq或者spin_lock_irqsave/spin_unlock_irqrestore
		
		如果可以确信在对共享资源访问前本CPU的所有中断是使能的，那么使用spin_lock_irq更好一些。因为它比spin_lock_irqsave要快一些，但是如果不能确定是否有中断没有使能，
		那么使用spin_lock_irqsave和spin_unlock_irqrestore更好，因为它将恢复访问共享资源前的中断标志而不是直接使能中断
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
