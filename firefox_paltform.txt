火狐系统平台包含了许多部件，诸如以下的部分可作为你的参考：

gaia：
用户接口及应用层，gaia本身也是一个运行在火狐软件栈上的web应用。

gecko:
提供web标准陈述的定义层。

gonk:
包含linux内核和HAL的底层。

gaia应用向导：
firefox的内存管理：
安全性能：
新特性支持：
设置列表：修改原生API
------------------------------------------------------------
首先科普一下几个火狐系统可能遇到的缩写概念：
B2G：boot-to-gecko，火狐系统的项目代码的代号，意思即将gecko启动起来。后系统名字正式改为firefox-OS后，由Mozilla公司提供对该系统的维护和服务支持。

Jank：一般出现在移动应用空间，表示应用中低效缓慢的代码导致的影响。

框架的总体概况：
框架结构图
火狐系统去掉了系统层和应用API层之间的本地API层，简化集成了整体平台的框架结构。

------------------------------------------------------------
Gaia：
火狐系统的用户接口层，设备中web应用的核心，本身也是一个web应用，承载在gecko层之上，各种web应用之下。

全部都是由Html5，CSS，js编写，允许用户利用提供的API来实现系统调用和编写个人的web应用。

------------------------------------------------------------
Gecko：
本身是web引擎，作为火狐系统的引擎和表现层，作为借口连接着gonk和gaia，向上层提供各种web-API，让上层能通过安全的web-API访问下层的硬件，形成一个完整的框架，去更新管理各种核心的服务。

火狐系统的runtime，提供所有的标准规范的支持（html，css，javascript），让那些API在gecko上运行更加顺畅，它大体包含了网络栈，图像栈，布局引擎，一个JavaScript的虚拟机，以及可移植层。
类比于android的运行环境（ART），预先将字节码转化机器码，减少每次程序启动到实际运行的这一段缓冲时间，让应用的运行更加流畅。

------------------------------------------------------------
Gonk：
火狐系统的底层，位于gecko和硬件设备之间，包含着linux的内核和HAL硬件抽象层，这一部分和android的底层结构基本没有区别，和android一样都大量使用了很多开源项目诸如linux，libusb，bluez等等，在HAL硬件抽象层中GPS，Camera等模块即直接使用了AOSP中的库函数，gonk基本已经可以看做是一个linux的精简版发行版。

Gonk是主要的移植目标，火狐系统的所有控制都会通过它，gonk和gecko之间的接口是完全开放的，gecko可以直接连接到gonk的telephony的栈或者frame-buffer上。

------------------------------------------------------------
火狐系统的启动流程：
当你准备开机，内核空间的bootloader就会启动，init进程建立，init启动b2g，用户空间b2g的gecko-port启动，再到上层的系统应用window-manager，window-manager启用gecko中的homescreen应用，最后表现在屏幕上进入系统主页。

kernel space-->native-->user space-->browswe layer

bootloader：
bootloader本身只是一段开机引导程序，根据引导程序的指示去加载系统启动所需的关键进程，bootloader最终将系统控制权交给linux的内核。
bootloader的显示即我们说的开机动画，由png格式的图作为每一帧的图像构成最终的动画，编译结果为splash.img。
bootloader的结束伴随着modem镜像的加载。

linux内核：
这一部分基本和AOSP项目中对linux内核的应用是一样的，设备商也有可能对linux源码进行一些客制化的修改，不过一般来说这一部分是不会改动的。
linux内核会启动设备同时建立运行必要的进程，根据init.rc和init.b2g.rc中的配置信息去启动一些关键的进程例如b2g，rild，最终启动用户空间的init进程。

https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Platform/Architecture




















