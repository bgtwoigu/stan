== VoLTE的架构(IMS网络结构,用户的信令面和media面,对应handset的设备结构) ==
IMS:IP Multimedia Subsystem -- IP多媒体子系统
VoLTE: voice over LTE,即经过PS域的呼叫实现

===站在EPS的角度来看的网络结构===
EPS即LTE中提到的EPC和eUTRAN的集合,扁平化的网络结构,主要网元有eNB,MME,S-GW,P-GW,PCRF,HSS等等,网元之间的plane(包含UE-->eNB-->MME的控制面,UE-->eNB-->S-GW-->P-GW/PCRF之间的用户面,还有UE和internet之间直接连接的media面),除此以外支持VoLTE,在此基础上添加了IMS相关的网元(添加的网元集中在核心网部分,也就是说接入网没变化),例如网元P-CSCF,作为链接P-GW,PCRF和IM-CN双方之间的接口,详细见IMS结构部分详细介绍.

呼叫会话控制功能（Call Session Control Function, CSCF）是IP多媒体子系统(IP Multimedia Subsystem,IMS)内部的功能实体,是整个IMS网络的核心,主要负责处理多媒体呼叫会话过程中的信令控制.它管理IMS网络的用户鉴权,IMS承载面QoS,与其它网络实体配合进行SIP会话的控制,以及业务协商和资源分配等.CSCF根据功能分为代理CSCF(Proxy CSCF, P-CSCF),查询CSCF(Interrogating CSCF,I-CSCF),服务CSCF(Serving CSCF,S-CSCF).


===站在IMS-CN的角度来看网络结构===
主要IMS新增网元的核心即S-CSCF,I-CSCF,BGCF部分,另外由P-CSCF作为IMS-CN和普通CN网络之间的接口,S-CSCF,I-CSCF功能如下介绍,S-CSCF的SIP-AS触发再链接到MRFC,MRFP等多媒体资源控制和处理网元,最后接入MGW,BGCF和S-CSCF互相连接,BGCF还和其他非本地域的BGCF之间允许相互路由,再通过相应的MGCF,MGW媒体网关和其控制网元可以连接到网络或CS域.具体结构和接口见图.

[1]信令部分
代理CSCF(P-CSCF):
P-CSCF(Proxy-CSCF)是IMS拜访网络的统一入口点,所有IMS终端发起和终止于IMS终端的会话消息都要通过P-CSCF.
P-CSCF作为一个SIP-Proxy,负责与接入网络无关的用户鉴权与IPSec管理,网络防攻击与安全保护,为节约无线网络资源进行SIP信令压缩与解压,用户的漫游控制,通过PDF(Policy Decision Function)进行承载面的NAT与QoS等功能等.

查询CSCF(I-CSCF):
I-CSCF(Interrogating-CSCF)是IMS网络的入口点.
在SIP注册过程中,I-CSCF通过查询HSS,为用户选择一个S-CSCF.在呼叫过程中,去往IMS网络的呼叫首先路由到I-CSCF,由I-CSCF从HSS获取用户所注册的S-SCSCF地址,将消息路由到S-CSCF.
前向的SIP请求/响应-->S-CSCF.

服务CSCF(S-CSCF):
S-CSCF(Servlng-CSCF)在IMS网络会话控制中处于核心地位,它接受通过P-CSCF转发来的注册请求,与HSS配合进行用户鉴权.并从HSS处下载用户签约的业务数据.
S-CSCF对于用户主叫及被叫侧进行路由管理,根据用户签约的初始过滤规则(Initial_Filter_Criteria,iFC),进行SIP-AS触发,实现丰富的IMS业务功能.
决定用哪一个AS去接收SIP消息,从而去提供相应的IMS服务.

PCRF:前面在EPS部分也提过了,负责计费策略和规则判断的网元.

[2]HSS

[3]AS:application-server,用于建立和实现IMS/VoLTE需要的各种服务.

[4]media
Breakout Gateway Control Function (BGCF)
 S-CSCF inserts BGCF into the signaling path, which in turns sends requests to MGCF
Media Gateway (MGW)/Media Gateway Control Function (MGCF)
 向其他的IP domain发出呼叫
 向PSTN发出呼叫
 PSTN和IMS-CN这两侧的解码编码(in case of codec mismatch)
Media Resource Function Controller (MRFC)
 信令面网元,接收来自AS和S-CSCF的信息,控制MRFP.
Media Resource Function Processor (MRFP)
 多媒体资源的实际处理网元
   Customized Ringback Tone (CRBT), a.k.a. Personalized Ringback Tone (PRBT)
 Network announcements, e.g., “cannot establish call,” “call forwarded to voicemail,” etc.

===信令面和media面===
QCI等级这个概念的详细内容参考TS23.203的table-6.1.7
QCI(qos_class_indication)是EPS中一个判定QoS的参数,一共分为9个等级,qci的值都代表着一个等级,每一种信令和数据EPS承载都会对应一个且不重复的QCI值,qci决定了该承载上的应该受到怎样的处理.

不同于控制面,信令面和media面都可以算作是用户面的一部分.
[1]信令面
协议栈结构: SIP(Session Initiation Protocol), SIGCOMP, UDP, IP, 空口
功能: UE和P-CSCF之间,主要内容是SIP的IMS注册/注销,VoLTE的主叫/被叫流程启动标识.
IMS的信令承载默认是no-GBR模式,QCI=5.(GBR表示受限定的速率,一般用于保证传输的速率)

[2]media面
协议栈结构: vocoder-frames, RTP, UDP, IP, ROHC(可靠性文件头压缩), 空口
功能: UE之间仅通过eUTRAN无线接入网,不过CN或MME部分,会通过S-GW和P-GW接入到互联网,然后在互联网中通过RTP协议实现的audio数据包的交互.
media的专用数据承载是GBR模式,QCI=1.

实时传送协议(Real-time_Transport_Protocol或简写RTP)是一个网络传输协议,RTP协议详细说明了在互联网上传递音频和视频的标准数据包格式,IP电话产业的技术基础,RTP协议和RTP控制协议RTCP一起使用,而且它是建立在用户数据报协议上的.

===Lab setup for VoLTE===
P22-24

===使用VoLTE的设备的硬件结构===
MPSS:
IMS(USIM + call_manager + data_services(LTE协议栈))

APSS:
直接和MPSS连接的audio的DSP;
MPSS的call_manager通过QMI_voice连接到APSS的QMI_RIL;
QMI_RIL连接framework的telephony相关(RIL_interface和call_manager)和IMS-QMI-IF(qcom/proprietary/imsservice);
Framework的call_manager和上层的phone-app沟通;

== VoLTE的呼叫流程 ==
===High-level VoLTE呼叫流程===
[1]VoLTE初始化
UE和EUTRAN/PDN: UE附着到LTE网络-->Domain选择(所有的呼叫流程都从IMS经过)-->IMS-PDN连接(信令承载的QCI=5)-->SIP-QoS流程
UE和IMS-CN: IMS注册和鉴权等等
ICSI(IMS Communication Services Identifier): 对于IMS服务都会分配一个tag与其对应,作为识别的标志?

[2]VoLTE事件处理流程
UE和IMS-CN: IMS事务建立
UE和EUTRAN/PDN: 建立VoLTE-QoS流程-->ROHC-->VoLTE数据交互(数据由eUTRAN路由,通过分组核心网之间传输呼叫通话需要的数据;voice帧由RTP数据包产生包含在UDP数据包中,再承载在IP协议上.)
UE和IMS-CN: IMS事务终止(释放清理资源)
UE和EUTRAN/PDN: 释放VoLTE-QoS流程

[3]VoLTE结束
UE和IMS-CN: IMS反注册

===High-level 终端之间的VoLTE呼叫===
UE模块集成了IMS用户机和LTE协议栈.
[1]发起呼叫,IMS收到呼叫管理的提醒,IMS用户机建立并向网络端发送"invite"消息
[2]LTE协议栈发起上行接入程序,发出"service-request"消息,开始尝试RRC连接建立
[3]LTE栈传送"invite"消息
(中间会经过eNB,EPC,由P-CSCF进入IMS-cn部分,通过I-CSCF路由到S-CSCF,再由S-CSCF判决该呼叫消息应该被导向哪一个I-CSCF,再到达目标UE对应的I-CSCF,最终通过目标UE的P-CSCF传递到P-GW,最后寻呼到目标UE;UE2接收寻呼并启动上行接入程序作为响应;"invite"消息最终也会路由到目标UE的IMS用户机处)
[4]P-CSCF1发送"100",从IMS-client2一直路由到IMS-client1的消息,去通知"invite"消息已经传递成功
[5]如果IMS-client2支持Client1的编码推荐?,IMS-client2会向IMS-client1发送一条"180(Ringing)"消息作为响应,和上一条信令的路由路径相同(表明SDP的编码选择?)

[6]当P-CSCF1和2接收到传递的"180(Ringing)"消息时,会触发EPS专用承载在网络部分的建立,P-CSCF1和2会各向PCRF发送一个"AA-Request"
(该请求包含IMS-PDN分配给UE的IP地址,还包含了media部件描述,该描述定义了编码和来自于"180(Ringing)消息中的"Traffic_Flow_Template(TFT)部分)
[7]PCRF使用接收的IP地址去验证当前这个"IP-CAN"事务,在IP-can事务建立阶段使用从HSS/SPR(Subscriber_Profile_Repository)下载的QoS策略信息,media描述信息决定QoS和话音的EPS专用承载中要过滤的信息,具体表现为一个IP-CAN事务的修改操作,发送"RAR_cmd"消息给PGW及网络端.
(消息包含QoS信息(QCI,ARP(Address_Resolution_Protocol地址解析协议),GBR/MBR(最低/高速率限制)),GPRS_Tunneling_Protocol(GTP))
[8]PGW接收命令,发送"create_bearer_request"到SGW
(包含信息EPS bearer QoS, S5/S8-Tunnel-ID, TFT, and LBI)
[9]SGW发送"create_bearer_request"到MME
(包含信息EPS bearer QoS, S1-Tunnel-ID, TFT, and LBI)
[10]MME选择为承载选择一个ID,发送一条NAS层消息"bearer Setup Request(Activate Dedicated EPS Bearer Context Request)"消息到eNB
(包含信息EPS bearer-ID, EPS QoS,S1-Tunnel-ID, NAS-message;激活专用EPS承载报文请求消息定义了EPS-bearer-ID,QoS参数,TFT and LBI)
[11]eNB向UE端发送"RRC-configuration-reconfiguration",将EPS承载映射和无线承载建立映射关系(承载ID,QoS等内容)
[12]UE接收激活承载,向eNB段做出响应"RRCconnection_reconfiguration_complete",eNB再向MME发送"bearer_setup_response"消息
(消息包含了EPS承载的ID,S1-tunnel-ID)
[13]UE向eNB发送上行直传的NAS层消息"activate_dedicated_EPS_bearer_context_accept"
()
[14]eNB继续上行直传给MME消息"activate_dedicated_EPS_bearer_accept"
[15]MME--"create_bearer_response"-->SGW-->PGW
[16]PGW--"RAR_response"-->PCRF
[17]PCRF--"AA-answer"-->P-CSCF,报告专用承载已经建立成功.

[18]IMS-client1发送"PRACK-SIP"消息给IMS-Client2
[19]IMS-client2响应消息"200(OK)",提示PRACK消息已接收,接收SDP-offer.
[20]当目标用户接受呼叫后(接听),IMS-client2会再发送一次消息"200(OK)"给IMS-client1端
[21]IMS-client1的响应"ACK"
最后进入实际voice通话过程中,两个IMS-Client接通,PCRF相关开始计费等等.

===IMS注册流程===
[1]DS提醒IMSLTE服务处于可用状态
CM--"serving-system-changed-event"-->IMS

[2]IMS根据rat和策略管理器的配置,获得APN列表,APN的各类属性,然后允许服务开始在IMS-PDN上发起
IMS--"feature-tag-add"-->IMS

[3]UE当前已经驻留在IMS的RAT中了,通过PDP连接去尝试IMS数据呼叫的启动
[4]DS提醒IMS数据呼叫的基础已经建立
DS<--"IMS_PDN的建立"和"DS_rat_indication"-->IMS

[5]IMS根据RAT,CM域的选择添加服务的tags，去触发IMS的注册流程
[6]获取IMS的配置信息,IMS注册流程开始
[7]注册请求通过空口由IMS发出
IMS--"register"-->SIP_Service

[8]接收到401 unauthorized的响应,IMS和UIM进行鉴权
SIP_Service--"401 unauthorized"-->IMS
IMS<--"ISIM Authenticate"-->UIM

[9]IMS注册请求携带着answer发向网络端,网络端做出响应"200 OK"
IMS--"register(携带对于401的回应)"-->SIP_service--"200 OK"-->IMS

[10]IMS提醒CM,VoLTE呼叫已经可以使用
IMS--"IMS已经准备就绪"-->CM
---------------------------------------------------------
IMS--"SIP_subscribe"-->SIP_service--"SIP 200 OK"-->IMS
SIP_service--"SIP notify"-->IMS--"SIP 200 OK"-->SIP_service

实际log部分:
[1]qpDcm.c	PDPHandler.cpp	qipcalliface.c
//获取到pref_rat_value值,RAT的值
[2]qpIMSPolicyManager.cpp		//RAT的值,APN的类型值(例如1对应IMS),APN的状态是否可用,APN允许的服务值ServiceMask(某个数值对应着一系列服务,例如7对应着VoLTE + VT视频电话 + SMS),IP地址的类型(例如2就是表明是属于ipv6的)
[3]PDPRATHandlerVoLTE.cpp	qpDcm.c
//获得当前驻留IMS的RAT,APN-type,对应的ServiceMask,PDP连接激活状态,qpDcmEstablishPDPConnection | pDcmProfile=b3eea90 dsAppID=29
[4]qpDcm.c	qpdpl.c	PDPRATHandlerVoLTE.cpp	
//event(200) DS_enetnonet(202) appID(29);	eventPdpActivated(pdp连接激活这个事件)raise了一个宏"QPE_RM_PDP_ACTIVATED_EV"
[5]qipcalliface.c	qimfif_cbs.cpp
//RAT,apn信息,qipcall_aval_domain=9, 所在域支持SMS&VOIP功能
[6]//获取各类IMS的配置信息:Public:sip:+11234567890@one.att.net,  Domain:one.att.net, Retrieved IP address: 2600:380:5de0:532f:0:32:f701:f201, ENTER - eRatInfo=10 pServingStatus=a4181ef, returning ACCTYPE_3GPP_E_UTRAN_FDD, utran-cell-id-3gpp=310410411C335CB84, RegisterService state is 0.
[7]//构建IMS注册请求的消息,write_event event for socket[98], Sent SIP Message:REGISTER sip:one.att.net
[8]//EVENT_SIP_MESSAGE_RECV:SIP/2.0 401 Unauthorized 接收到消息的对应事件,UIM和IMS之间传递各种参数进行鉴权(例如RAND,ALGO,AUTN,计算得到的CK,LK),最终鉴权成功qpAMSS_GetAuthResponse - Setting Authstatus to QC_AUTH_SUCCESS, EVENT_SIP_REQUEST_SEND: REGISTER 发送注册消息的对应事件
[9]//为了去获得IMS注册状态网络的提醒,在事件"EVENT_SIP_REQUEST_SEND: SUBSCRIBE"发生之后就会进行消息"200 OK"的发送
[10]qipcalliface.c	ims_reg_service_status.cpp
//向CM更新IMS的状态,QIPCALL_IFACE_EPC is up, indicating CM about Active status,
//Changing VoIP Service Status From 0 to 2, Changing VT Service Status From 0 to 2, Changing SMS Service Status From 0 to 2

===MO呼叫流程===(不同于之前看的那种规范式的呼叫流程)
[1]UI上层发起呼叫"qmi_voice_dial_call_req"经过函数voice_call_dial_req()得到返回消息"dial request"发送或者code error的返回值.
[2]QMI向CM"voice call is dialed",CM向IMS发送"MO呼叫,IMS服务启动"类似的消息,QMI向UI上层返回消息做出响应.
[3]IMS启动RTP的初始化,提供经过互联网直接的语音通话数据交互的基本准备,于此同时QMI再次向上层发送"QMI_voice_all_call_status_IND"类似的指示呼叫状态的消息,提示现在是MO呼叫"origination".
[4]IMS向SIP-server发送"invite"请求(基于UE设置创建SDP offer),发起SIP的服务/VoLTE事务的建立.
[5]SIP-server响应消息"100"(收到invite消息提示)和"180 Ringing"(相关的编码设置,专用承载的建立消息等等)
[6]IMS-->CM-->QMI-->上层UI,播放来电铃声,"IMS call is Ringing"-->"QMI_voice_all_call_status_IND"(进入到了alerting状态)
[7]两端UE确认各种信息OK,SIP-server发送消息"200(OK)"给IMS端,IMS做出响应"ACK",至此正式的呼叫已经接通.
[8]IMS-->cm-->QMI-->UI:告诉上层通话已接通,"QMI_voice_all_call_status_IND"处于conversation状态.

关键源码: /msm8939_modem_2-1_baseline/LINUX/android/vendor/qcom/proprietary/qmi/tests/qmi_voice_call.c

HD voice使能-->NV-65964置位为1(1=AMR-WB,0=AMR-NB)
AMR-NB的速率标准-->NV-66301
	0 = AMR 4.75 kpbs
	1 = AMR 5.15 kpbs
	2 = AMR 5.90 kpbs
	3 = AMR 6.70 kpbs
	4 = AMR 7.40 kpbs
	5 = AMR 7.95 kpbs
	6 = AMR 10.20 kpbs
	7 = AMR 12.10 kpbs
AMR-WB的速率标准-->NV-67239
	0 = AMR-WB 6.60 kbps
	1 = AMR-WB 8.85 kbps
	2 = AMR-WB 12.65 kbps
	3 = AMR-WB 14.25 kbps
	4 = AMR-WB 15.85 kbps
	5 = AMR-WB 18.25 kbps
	6 = AMR-WB 19.85 kbps
	7 = AMR-WB 23.05 kbps
	8 = AMR-WB 23.85 kbps
octet排列方式/bandwidth排列方式选择-->"NV-67241" for AMR-NB and "NV-67240" for AMR-WB
(0 = bandwidth efficient 1 = octet aligned)
AMR-WB且NV-67248=1位octet排列方式情况下,用一个bitmask来存放数值.
读取实例: 149 = 1001 0101 = 23.05 kbps, 15.85 kbps, 12.65 kbps, 6.60 kbps
对应的第7,4,2,0位为1,所以对应AMR-WB对应的速率标准.

NV-67281设置UE等待时间(单位是毫秒),超过此等待时间则主叫UE会取消这次VoLTE呼叫建立.

===携带预准备的MO流程===
和普通MO流程的区别:
多了网元EUTRAN/EPC的部分,IMS-CN和IMS之间多了"SIP-PRACK","SIP 180"消息变成了"SIP 183 SDP",建立完专用承载后的"SIP update"等消息,IMS和EPS之间多了专用承载建立部分的消息,"SIP 200 OK"响应消息有两条.

在接收到SIP_183消息后,QIPcall在数据层注册qos事件,并启动QoS相关的定时器.该定时器如果没有被设定,则QIPcall会直接释放本次MO呼叫,并且发送"SIP_cancel"消息给网络端.

[*]发向IMS的响应消息"200(OK)",第一次发出提示SIP_PRACK消息已接收.当专用承载建立,SIP_update之后会再发送一次消息"200(OK)"给IMS端,IMS响应"ACK",至此正式的呼叫已经接通.

NV-71572: qipcall_qos_reservation_timer= 2000 毫秒,设定qos相关定时器,必须设置的一个东西
NV-65957: 去使能qipcall_precondition_enable这个宏

===MT被叫流程===
[1]被叫端接收到"invite"消息,被叫端UE-->IMS-CN-->IMS--(被呼叫提示)-->CM,提示有呼叫出现.
(在RTP定时器的时间范围内,打开RTP功能,传送IMS内部的呼叫ID,向上层报告呼叫到来的请求)
[2]CM-->IMS-->IMS-CN,发送"180"消息.
(IMS等待来自CM的响应"wait_for_invite_rsp",去确定VoLTE呼叫是被允许的)
[3]IMS-->CM-->QMI-->上层UI,被呼叫的铃声提示-->CM_call_event_incoming-->QMI_voice_call_status_IND.(处于incoming状态)
[4]上层UI做出反应,选择接听-->QMI-->CM-->IMS-->IMS-CN,发送消息"200"作为SDP的应答.
[5]IMS-CN-->IMS-->CM-->QMI-->UI, QMI_voice_answer_call_msg-->响应"ACK"消息,进入"conversation"状态.

is_alert_info_set: 这个标志位值表示当前进程中是否有活动中的呼叫,0表示无,1表示有.

NV-70213: LTE的RSRP的配置门限,单位dBm
NV-69673: IMS operation mode
NV-67280: 响铃定时器,单位毫秒,超时则终止通话,如果拒绝则回返"486 buys here"的提示给MO端

===携带预准备的MT被叫流程===
区别点基本和前面MO路程一样,不做赘述
P79-84

===VoLTE通话的前提条件===
当前RAT是LTE; CM域选择选择了IMS; 没有活动的1X呼叫; 当前无MO-VoLTE呼叫建立; 当前没有或只有一个活动的VoLTE呼叫; LTE-RSRP有设置门限值(NV-70213).

===Call_termination(近距离建立)===
CM接收QMI的结束命令,CM请求IMS去结束VoLTE呼叫,IMS内部清除VoLTE呼叫并发送"BYE"请求,得到相应"200_OK",呼叫终止提示发给QMI和上层.

DPL: Data Protection Layer 数据保护层,IMS的内部结构??

===Call_termination(远距离建立)===
略. P90

===Call_Hold呼叫保持===
在VOIP通话已经建立成功的前提下:
[1]UI-->QMI, QMI_voice_manage_IP_calls(hold_active_accept_watting_or_held)
[2]QMI-->CM, cm_mm_call_cmd_sups(),CM_call_sups_type_hold_call callid=15...
[3]CM-->IMS-->CM, CM_call_event_sups.
[4]IMS-->SIP-server-->IMS, "invite"消息和对应的响应"200 OK"
[5]SIP-stack<-->IMS, 消息"QPE_SIP_reinvite_established_EV"和reinvite的"ack"
[6]IMS-->CM, CM_ip_call_IND_call_hold指示,cm_ip_call_IND_sups_conf
[7]CM-->QMI, CM_call_event_call_on_hold,CM_call_event_MNG_calls_conf
[8]QMI-->UI, QMI_voice_manage_IP_calls(qmi_results_success),给提供呼叫当前的状态,处于hold(保持)的状态.
QMI_VOICE_ALL_CALL_STATUS_IND(CALL_STATE_HOLD)
QMI_VOICE_CM_IF_CALL_TYPE_VOIP
QMI_VOICE_CM_IF_MODE_LTE

call state=6即QMI_VOICE_CM_IF_CALL_STATE_HOLD, call type=2即VOIP call.

===Call_resume呼叫重启===
流程和call_hold基本一样,指示传递的内容区别而已.

point: 只有CM-->QMI的CM_call_event_call_on_hold事件变成了CM_call_event_retrieved,最终qmi_voice_all_call_status_IND是"conversation"状态.

===Call_add===
在已有一个IP通话存在的基础上,添加一个VoIP通话.
由上层UI向QMI,CM,IMS发起将当前呼叫置为hold状态的请求,这部分和call_hold流程一样,在这一步完成后,执行建立MO-call的基本流程,再结束该MO-call流程后,由QMI向上层UI指示从"hold"变为"conversation"状态.

===Call_waiting===
UE1和UE2的Voip通话建立的基础上:
UE1被寻呼,接收到"invite"消息,UE1在UI中看到有新的呼叫的提示,UE1选择先接通和UE3的通话,则UE1和2之间的呼叫被置为"hold"状态,然后UE1和3之间的连接建立,这一部分即在MT-call中的流程,IMS向CM,QMI,UI逐级传递连接的事件消息.

===Call_conference===
====Setup====
建立一个多UE互相之间通过一个conference-server(类似于SIP-server)联通,从而能互相通信的电话会议.

前提: UE1和2处于hold,UE1和3处于conversation
[1]上层UI/UE1发起电话会议的请求,将UE1和3之间的状态置为"Hold".
[2]UE1通过发送"invite"到"conference-URI"(需要参加会议的所有UE的对应的一个标识?)来创建一个会议.
[3]UE1发送"REFER(携带了UE2的URI)"到conference-server,由其将invite消息发给被指定的UE(UE2).
[4]对应UE(例如这里是UE2)接收到"invite"消息,UE1接收到各种"notify"消息.
[5]UE1接收到notify后结束和UE2的呼叫,UE2接受和conference-server的呼叫建立.
[6]以此过程一个一个去添加要加入会议的UE到conference-server中去.

====Subscribe event package====
前提: UE1,2,3之间建立了一个conference.
[1]UE1"订阅"这个会议相关的event_package,会接收到所有的会议内容?
[2]UE2和3随后"订阅".
[3]如果UE和conference-server需要断开,通过信息"BYE"实现,与此同时同会议组的其他UE会收到一个notify.

====LOG====
[1]UI发起请求QMI_voice_manage_ip_calls: make_conference_call
[2]UE1和3之间呼叫状态置为hold: qipcall_dpl_ctrl_cb: eCallCbType = 13
[3]QMI向UI反馈此时所有呼叫处于hold状态
[4]UI发起conference call到IMS: qipcall_dpl_ctrl_cb: eCallCbType = 0
[5]IMS发送invite消息到conference-server
[6]CM-->QMI-->UI: 电话会议的状态报告反馈给上层: CALL EVENT RECEIVED from CM : id = 65542, name = CM_CALL_EVENT_CONNECT
[7]QMI向UI发送指示信息: 建立电话会议
[8]to UE2: EVENT_SIP_REQUEST_SEND: REFER
[9]CALL EVENT RECEIVED from CM : id = 65539, name = CM_CALL_EVENT_END
[10]UE1和2之间呼叫结束
[11]to UE3: EVENT_SIP_REQUEST_SEND: REFER
[12]IMS和UE3断开连接: EVENT_SIP_REQUEST_SEND: BYE
[13]CALL EVENT RECEIVED from CM : id = 65539, name = CM_CALL_EVENT_END
[14]UE1和3之间呼叫结束
[15]conference call成功指示返回给IMS
[16]IMS-->CM
[17]CM-->QMI-->UI: CALL EVENT RECEIVED from CM : id = 65579, name = CM_CALL_EVENT_MNG_CALLS_CONF
[18]QMI向UI返回消息QMI_VOICE_MANAGE_IP_CALLS: QmiResult = QMI_RESULT_SUCCESS

===DTMF===
Dual Tone Multiple Frequency 双音多频

前提: UE1和2正处于VoIP呼叫通话中.
[1]QMI_voice_start_cont_DTMF_msg: Continuous DTMF Information Tlv(digit = 49)

//Command CM IF START CONT DTMF (7) pending receipt of CM_INBAND_EVENT_REV_START_CONT_DTMF_CONF
//=CM= CMIPAPP: Send start inband DTMF for call 6

[2]DTMF通过RTP发送
IMS/High 02:19:39.113 qipcallh.c 15230 -----> Sending dtmf for digit 49 duration :20
IMS/High 02:19:39.133 qipcallh.c 15230 -----> Sending dtmf for digit 49 duration :40
IMS/High 02:19:39.155 qipcallh.c 15230 -----> Sending dtmf for digit 49 duration :60
IMS/High 02:19:39.175 qipcallh.c 15230 -----> Sending dtmf for digit 49 duration :80
IMS/High 02:19:39.195 qipcallh.c 15230 -----> Sending dtmf for digit 49 duration :100
IMS/High 02:19:39.216 qipcallh.c 15230 -----> Sending dtmf for digit 49 duration :120

[3]释放
QMI_voice_stop_cont_DTMF_msg: 

//Stop DTMF event: 0x31 Duration :120
//qipcall_stop_dtmf_rpt_conf: call modify rpt ind. eCALL_IND_STOP_DTMF_CNF Call Id=6, status = 1

发送: KTVOLTE到10086

