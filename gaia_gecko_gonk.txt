===Gecko===
如同之前提到的那样，火狐系统的的gecko对web标准作出定义，并控制着手机硬件设备之间的交互。
web应用利用安全的web-API控制着硬件，web-API提供了面向下层的硬件设备的可编程接口，web的内容会通过使用HTML5语言来访问到这些API。
一个应用包含各种由HTML5编写的web内容，去构建一个web应用需要你在火狐系统的手机上进行组装，打包，分发等等。
web引用在火狐系统的运行环境下run-time，对其的web内容进行解释，编译，并在这个web的引擎中渲染。

图-gecko结构图
【1】gecko结构
最上层和gaia层相连的是火狐系统的run-time，由它和下面的权限管理器相连。

安全性框架包含如下：
权限管理器，web-API中会涉及到的各种接入功能的权限控制
接入控制列表，web-API中涉及到的接入功能和权限的矩阵列表
证书验证，用户及各个应用的鉴权
权限存储部分，接入web-API所需的特权设定存储集

web-API：
标准的API集，将硬件的功能调用开放给上层，提供安全，可编程的接口，同时伴随数据的存储。

IO：
面向硬件和数据存储设备的接口

软件更新：
各种web应用的更新和第三方的应用

布局和渲染：
gecko引擎会去解析并运行网页内容，依规定的形式向上层即用户展示

b2g进程：
作为gecko的底层部件，和面向gonk的接口，是一个拥有特权高优先级的系统进程，将各种应用作为子进程启动管理。

【2】和火狐系统相关的gecko的各类文件介绍
b2g/：包含了火狐系统主要相关的函数

b2g/chrome/content：包含了运行在系统应用上的js文件

b2g/chrome/content/shell.html：对gaia层的入口，系统应用必须的html文件，shell.html文件关联了setting.js和shell.js这两个文件，settings.js包含了系统默认的设置参数，
	
	<script type="application/javascript;version=1.8" src="chrome://browser/content/settings.js"> </script>
	<script type="application/javascript;version=1.8" src="chrome://browser/content/shell.js"> </script>

b2g/chrome/content/shell.js：这个文件是在gaia层第一个被加载的系统应用，它会引入更多的需求模块，定义“sendCustomEvent”和“sendChromeEvent”去和gaia进行交互，提供之后的web应用的安装帮助，诸如indexedDB quota，RemoteDebugger，keyboard helper，screenshot tool之类。
总之该文件最重要是去启动gaia系统应用，然后将整个系统的管理工作都交给这个gaia的上层应用。

	let systemAppFrame =
	  document.createElementNS('http://www.w3.org/1999/xhtml', 'html:iframe');
		...
	  container.appendChild(systemAppFrame);
  
b2g/app/b2g.js：该文件包含了预定义的设置，就像浏览器的设置文件一样，作用等同于gaia的pref.js文件，这些设置自己都是可以在设置中进行更改的，当然也可以在gaia的user.js中对其进行完全的重写再编译该脚本文件。
----------
dom/{API}
新提供的API陈述都会放在dom/目录下，那些旧的API会放在dom/base/目录下，例如navigator.cpp

dom/apps：加载.jsm文件，.js的API陈述例如webapp.js会被安装得到其本身。

dom/apps/PermissionsTable.jsm：包含所有的权限定义都放在这个文件里。
----------
dom/webidl：webIDL是在定义web-API时用到的“特定语言”，更多内容可以参考如下。https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings

hal/gonk：该目录包含和gonk层移植相关的文件。

----------
module/libpref/src/init/all.js：所有的配置文件。

/system/b2g/omni.ja和/system/b2g/omni.js：设备里资源的pack类型/Contains the pack of styles for resources in the device.

【3】处理输入事件
在gecko层中发生最多的事件就是用户操作的触发事件，诸如在上层你按下按钮，对屏幕的触屏操作等等都会以“输入事件”的方式表现反馈回上层，这些操作事件通过gonk里的一个nsIAPPShell进入到gecko，这是一个gecko的接口用于表示gecko应用的入口点，因此当输入设备驱动调用nsAPPShell对象时，gecko子系统就会发送对应的事件给上层的用户接口。
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAppShell
http://mxr.mozilla.org/mozilla-central/source/widget/gonk/nsAppShell.cpp

	void GeckoInputDispatcher::notifyKey(nsecs_t eventTime,
										 int32_t deviceId,
										 int32_t source,
										 uint32_t policyFlags,
										 int32_t action,
										 int32_t flags,
										 int32_t keyCode,
										 int32_t scanCode,
										 int32_t metaState,
										 nsecs_t downTime) {
	  UserInputData data;
	  data.timeMs = nanosecsToMillisecs(eventTime);
	  data.type = UserInputData::KEY_DATA;
	  data.action = action;
	  data.flags = flags;
	  data.metaState = metaState;
	  data.key.keyCode = keyCode;
	  data.key.scanCode = scanCode;
	  {
		MutexAutoLock lock(mQueueLock);
		mEventQueue.push(data);
	  }
	  gAppShell->NotifyNativeEvent();
	}

这些“事件源”来自于标准LINUX的输入事件系统，火狐系统在这之上加了一个抽象层，向上层提供更适用于该系统的特性和过滤功能。
源码参考，你可以自己修改源码，通过“EventHub::getEvents()”函数创建定义新的“输入事件”：http://mxr.mozilla.org/mozilla-central/source/widget/gonk/libui/EventHub.cpp
图 - EventHub::getEvents函数
一旦事件从gonk层传递到gecko层之后，它们就会被nsAppShell调度分配进入到“dom/”，事件最终由gecko本身使用或者调度给web应用作为反馈的DOM事件。

	一个在dom/里已经封装好的“输入事件”
	static nsEventStatus sendKeyEventWithMsg(uint32_t keyCode,
											 uint32_t msg,
											 uint64_t timeMs,
											 uint32_t flags) {
		nsKeyEvent event(true, msg, NULL);
		event.keyCode = keyCode;
		event.location = nsIDOMKeyEvent::DOM_KEY_LOCATION_MOBILE;
		event.time = timeMs;
		event.flags |= flags;
		return nsWindow::DispatchInputEvent(event);
	}

【4】图形功能
在底层上，gecko使用“OpenGL ES 2.0”去画出一个GL的报文，该报文会去封装硬件的“缓冲帧”。这个操作是在gonk层的nsWindow.cpp里面完成，参考代码如下：
	OpenGL ES 2.0：https://www.khronos.org/opengles/2_X/
	nsWindow文件：http://mxr.mozilla.org/mozilla-central/source/widget/gonk/nsWindow.cpp
	gNativeWindow = new android::FramebufferNativeWindow();
	sGLContext = GLContextProvider::CreateForWindow(this);

“FramebufferNativeWindow”类是直接由Android启动，“FramebufferNativeWindow.cpp”
这个使用gralloc-API去将显卡驱动的帧缓存区映射到内存中。

gecko使用它的层级系统将帧内容画在屏幕上，具体发生的过程如下：
1.Gecko draws separate regions of pages into memory buffers. Sometimes these buffers are in system memory; other times, they're textures mapped into Gecko's address space, which means that Gecko is drawing directly into video memory. This is typically done in the method BasicThebesLayer::PaintThebes().
2.Gecko then composites all of these textures to the screen using OpenGL commands. This composition occurs in ThebesLayerOGL::RenderTo().

gecko负责处理渲染需求的web内容的详细在此不做赘述。

【5】HAL
HAL作为火狐系统的硬件抽象层，同时也是被移植的层级之一，它控制底层硬件设备访问系统接口，通过使用c++的API去访问gecko的高层。
这些API在不同平台的实现依赖于自身gecko的HAL，这里的HAL层并不是完全向gecko的js代码开放，这一部分的交互是有web-API来控制操作。

当用户发起一个电话相关的请求，诸如拨号，接入wifi，连接蓝牙等操作，火狐系统的所有相关堆栈都会关联到这一个请求操作，上层发起，gaia层的应用和web内容通过web-API调用尝试访问底层设备，gecko层作为中间层将请求发送给gonk层，gonk层收到请求后触发各种响应，然后初始化建立并由gonk层管理。
-----------------
How the HAL works：
以Vibration这个功能为例，这个API定义在hal/hal.h文件中：
http://mxr.mozilla.org/mozilla-central/source/hal/Hal.h

	void Vibrate(const nsTArray<uint32> &pattern);

//vibrate函数经过上层操作然后被gecko调用向底层传递，gonk层对应的调用函数定义在这里：http://mxr.mozilla.org/mozilla-central/source/hal/gonk/GonkHal.cpp
	
	void Vibrate(const nsTArray<uint32_t> &pattern) {
	  EnsureVibratorThreadInitialized();
	  sVibratorRunnable->Vibrate(pattern);
	}

//发送请求让手机开始震动，同时从而启动了一个新线程，这个新线程定义在“VibratorRunnable::Run”中，主循环过程如下所示：
	
	while (!mShuttingDown) {
	  if (mIndex < mPattern.Length()) {
		uint32_t duration = mPattern[mIndex];
		if (mIndex % 2 == 0) {
		  vibrator_on(duration);
		}
		mIndex++;
		mMonitor.Wait(PR_MillisecondsToInterval(duration));
	  }
	  else {
		mMonitor.Wait();
	  }
	}

//“vibrator_on”函数是gonk层的一个HAL-API，它会控制设备去启动一个震动马达，就内核来说，实际上这个API会使用sysfs向特定内核对象写入一个值，从而去发送相应的控制信息到内核驱动。

-----------------
Fallback HAL API implementations：
当提供的HAL-API出现在某些不完全开放接口的平台，可能需要将HAL-API回退，即提供一些闲置接口函数，需要你自己去编写这个函数实现的具体内容。
		void Vibrate(const nsTArray<uint32_t> &pattern) {
	}
	
-----------------
Sandbox implementations：沙盒实现
不同的web应用和内容运行时具有不同的特权和优先级，需要一个中心进程来管理它们之间可能出现的竞争，所以使用了一个在HAL层中叫做“沙盒”的实现方式，即各进程的代理请求都会通过使用“IPDL”传递给b2g进程。

以之前的那个手机振动的功能为例，“Vibrate()”函数定义在“hal/sandbox/SandboxHal.cpp”文件中：http://mxr.mozilla.org/mozilla-central/source/hal/sandbox/SandboxHal.cpp

	void Vibrate(const nsTArray<uint32_t>& pattern, const WindowIdentifier &id) {
	  AutoInfallibleTArray<uint32_t, 8> p(pattern);

	  WindowIdentifier newID(id);
	  newID.AppendProcessID();
	  Hal()->SendVibrate(p, newID.AsArray(), GetTabChildFrom(newID.GetWindow()));
	}
//发送由PHal接口定义的消息，具体描述在hal/sandbox/PHal.ipdl文件中：http://mxr.mozilla.org/mozilla-central/source/hal/sandbox/PHal.ipdl

	Vibrate(uint32_t[] pattern);
	
//该消息的接受者“HalParent::RecvVibrate()”，函数具体内容如下，定义在文件“hal/sandbox/SandboxHal.cpp”中：http://mxr.mozilla.org/mozilla-central/source/hal/sandbox/SandboxHal.cpp

	virtual bool RecvVibrate(const InfallibleTArray<unsigned int>& pattern,
				const InfallibleTArray<uint64_t> &id,
				PBrowserParent *browserParent) MOZ_OVERRIDE {

	  hal::Vibrate(pattern, newID);
	  return true;
	}

以上流程只是简单展示了消息是如何从上层的内容进程通过gecko传递到gonk，最终通过gonk的HAL层的相关API，完成对实际硬件设备驱动的控制。

【6】DOM API
DOM的API实际上就是web内容和gecko沟通的方式，更多的细节不做赘述，可以自行参考“文档对象模型”资料，它包含了一个外来函数接口FFI和对象模型OM，在js和c++之间。

例如上面的vibration的API就是通过IDL接口开放给上层的，IDL接口实例：
	[implicit_jscontext] void mozVibrate(in jsval aPattern);
jsval参数指示mozVibrate函数去接收所有的js值，IDL编译器xpidl会生成一个c++的接口，定义如下：
	NS_IMETHODIMP Navigator::MozVibrate(const jsval& aPattern, JSContext* cx) {
	  // ...
	  hal::Vibrate(pattern);
	  return NS_OK;
	}
这个接口会去调用HAL::Vibrate函数把DOM传递到gecko的HAL层，由此进入HAL层进一步操作控制设备驱动，DOM本身并不关心其运行的底层和平台（gonk，OSX，Windows），

===RIL===
无线接口层的细节，主要模块部件如下：
rild：
用于专用的调制解调器固件的服务进程。

rilproxy：
rild和b2g进程沟通的接口，rild的代理消息端口。

b2g：
定义在gecko里的关键进程，通常也被叫做“chrome”进程，相关的这个文件dom/system/gonk/ril_worker.js会新建一个工作队列通过rildproxy和rild沟通，去实现RIL状态机。
“nsIRadioInterfaceLayer”接口，是b2g这个主进程中的XPCOM服务的实现，它负责了ril_work.js线程和其他gecko部件及其线程的消息交互。

Gecko's content process：
伴随着gecko的内容进程，“nsIRILContentHelper”接口会提供一个XPCOM服务，它能让代码实现部分文件对象模型，例如在b2g进程中电话和短信的API和无线接口的交互。

----------
rild进程和DOM之间的交互：
当modem侧收到呼叫来电，它会提醒rild进程使用相应的通信协议去准备一条适用于客户机的消息，ril.h文件这里的定义和Android系统中的电话部分一样，rild会生成并向rildproxy发送一条消息“RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED”，rildproxy和rild连接后一直在执行它自己函数的主循环部分，一旦接收到rild的消息以后，它会将消息写入套接字从而连接rildproxy和b2g进程。
	
	ret = read(rilproxy_rw, data, 1024);
	if(ret > 0) {
	  writeToSocket(rild_rw, data, ret);
	}

	int ret = read(fd, mIncoming->Data, 1024);
	// ... handle errors ...
	mIncoming->mSize = ret;
	sConsumer->MessageReceived(mIncoming.forget());
	
b2g进程接收，最终由一个系统统一的消息管理器将所有消息解包再调配给ril_worker.js线程，去实现RIL状态机，参考如下函数RILReceiver::MessageReceived()的功能：

	virtual void MessageReceived(RilRawData *aMessage) {
	  nsRefPtr<DispatchRILEvent> dre(new DispatchRILEvent(aMessage));
	  mDispatcher->PostTask(dre);
	}
	
ril_worker.js这个任务会去调用到onRILMessage()函数，这里使用了java的一个API实现：

	return JS_CallFunctionName(aCx, obj, "onRILMessage", NS_ARRAY_LENGTH(argv),
							   argv, argv);

onRILMessage()函数将消息字节按照一定格式进行排列打包，每一个打包好的消息包会被单独发送给需要的处理程序中去。

	handleParcel: function handleParcel(request_type, length) {
	  let method = this[request_type];
	  if (typeof method == "function") {
		if (DEBUG) debug("Handling parcel as " + method.name);
		method.call(this, length);
	  }
	}

通过获取目标的请求类型，找到对应处理程序，RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED的处理程序如下：

	RIL[UNSOLICITED_RESPONSE_CALL_STATE_CHANGED] = function UNSOLICITED_RESPONSE_CALL_STATE_CHANGED() {
	  this.getCurrentCalls();
	};

状态机通过调用getCurrentCall()函数获取当前的呼叫状态

	getCurrentCalls: function getCurrentCalls() {
	  Buf.simpleRequest(REQUEST_GET_CURRENT_CALLS);
	}

一方面呼叫接通的请求发向rild，伴随着“RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED”消息，反方向rild也对ril_worker.js的处理程序发出响应“REQUEST_GET_CURRENT_CALLS”获取当前呼叫状态，如果确认呼叫状态发生变化，ril_worker.js会向nsIRadioInterfaceLayer服务发出呼叫状态变化的提醒消息。
	
	_handleChangedCallState: function _handleChangedCallState(changedCall) {
	  let message = {type: "callStateChange",
					 call: changedCall};
	  this.sendDOMMessage(message);
	}

onmessage()接收到呼叫状态变化的提醒事件。

	onmessage: function onmessage(event) {
	   let message = event.data;
	   debug("Received message from worker: " + JSON.stringify(message));
	   switch (message.type) {
		 case "callStateChange":
		   // This one will handle its own notifications.
		   this.handleCallStateChange(message.call);
		   break;
	   ...

以上所有的消息调度都是使用了PPMM父进程消息管理器。
	handleCallStateChange: function handleCallStateChange(call) {
	  [some internal state updating]
	  ppmm.sendAsyncMessage("RIL:CallStateChanged", call);
	}  

在内容进程中，消息由CPMM子进程消息管理器的nsIRILContentHelper服务的receiveMessage()函数接收。

	receiveMessage: function receiveMessage(msg) {
	  let request;
	  debug("Received message '" + msg.name + "': " + JSON.stringify(msg.json));
	  switch (msg.name) {
		case "RIL:CallStateChanged":
		  this._deliverTelephonyCallback("callStateChanged",
										 [msg.json.callIndex, msg.json.state,
										 msg.json.number, msg.json.isActive]);
		  break;

在每一个电话呼叫注册时，反过来调用nsIRILTelephonyCallback.callStateChanged()函数。
每一个web应用去访问“window.navigator.mozTelephony”API中已经注册的一个呼叫对象，从而将消息事件分配到对应的web应用中去，例如呼叫状态变化或者新的呼叫事件。

	NS_IMETHODIMP Telephony::CallStateChanged(PRUint32 aCallIndex, PRUint16 aCallState,
											  const nsAString& aNumber, bool aIsActive) {
	  [...]

	  if (modifiedCall) {
		// Change state.
		modifiedCall->ChangeState(aCallState);

		// See if this should replace our current active call.
		if (aIsActive) {
		  mActiveCall = modifiedCall;
		}

		return NS_OK;
	  }

	  nsRefPtr<TelephonyCall> call =
			  TelephonyCall::Create(this, aNumber, aCallState, aCallIndex);
	  nsRefPtr<CallEvent> event = CallEvent::Create(call);
	  nsresult rv = event->Dispatch(ToIDOMEventTarget(), NS_LITERAL_STRING("incoming"));
	  NS_ENSURE_SUCCESS(rv, rv);
	  return NS_OK;
	}

上层应用可以接受这些事件并更新自身的用户接口。

	handleEvent: function fm_handleEvent(evt) {
	  switch (evt.call.state) {
		case 'connected':
		  this.connected();
		  break;
		case 'disconnected':
		  this.disconnected();
		  break;
		default:
		  break;
	  }
	}
	
----------
3G data：
移动网络通信服务部分，控制数据在modem的传输模式等等。

----------
所有和RIL交互相关的DOM-API：略

===WIFI===
wifi_backend作为火狐系统wifi控制的最重要部分，辅助去管理控制wifi的驱动使能和网络的接口使能等等，backend也类似于一个状态机。

----------
WifiWorker.js：
wifi状态机的实现和完成驱动需要的代码

实现wifi接口的主要逻辑部分的文件，运行在b2g进程之中，由SystemWorkerManager将其实例化，这个文件可以分为一个匿名函数和这个函数的原型wifiworker共两部分，匿名函数最终被WiFi管理器作为一个本地API提供出来，包含着各种事件提示信息

这个匿名函数包含了各种逻辑关系让用户可以单独控制它与请求者之间去完成请求和响应的交互。

wifiworker对象位于wifi管理器和DOM之间，它从dom处接收请求向dom发送对应事件信息响应，保持着请求者的状态信息并控制着下一步的行为操作。

----------
DOMWifiManager.js：
wifi功能实现的相关API都在这里开放给上层web内容，API定义在nsIWifi.idl文件中。

通过使用API传输调用者和wifiworker之间的信息，

----------
DHCP
linux标准的DHCP客户程序“dhcpcd”负责处理着DHCP和DNS，但是它不能对网络连接状态做出响应，因此火狐系统在每一次连接无线网络时都会重启一次dhcpcd程序。它负责了路由相关的设置，使用网络管理器去告诉内核DNS服务器的相关内容。

===Network Manager===
移动数据网络和wifi两大部分的管理

===Processes and threads===
略

根据进程状态分为了多个控制组，大约有6种优先级和5个控制组。
一个应用的所有相关进程、线程都被分配到同一个控制组，线程优先级的变化只会发生在一个主要事件的发生时。
POSIX可移植性操作系统接口







