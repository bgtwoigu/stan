==目标文件是什么==
[1]目标文件的格式:win端的PE(portable executable),linux端的ELF(executable linkable format),这些都属于unix里最早提出的COFF(common file format)格式的变种,obj和.o文件就是编译后但未链接之前的中间文件.
不光是可执行文件,库文件都可以以可执行文件的格式存储.

可重定位文件	.o .obj
可执行文件		bash .exe
共享目标文件 	.so .dll
核心转储文件 	core dump

目标文件和可执行文件格式与操作系统和编译器有关,

[2]目标文件的组成
编译后的机器指令代码(放在代码段),数据(放在数据段),以及链接所需的符号表,调试信息,字符串...所有这些属性信息通常以"段"的形式存储.

目标文件简要结构如下:
EFS/obj---file_header(链接时动态还是静态,文件是否可执行,入口地址,目标硬件,目标操作系统信息,包含一个段表用于描述文件中各个段在文件中的偏移位置及属性等等)---.text section(包含程序指令)---.data section(已经初始化的程序的变量)---.bss section(保存未初始化的程序的变量)

没有初始化的变量默认是为0的,因此没有必要放在data段占用空间,所以BSS(block started by symbol)段用于为未初始化的程序的变量预留位置,没有实际内容,也不占空间.

程序编译后主要分为程序指令对应的代码段和程序数据对应的data段/bss段,分段的好处在于,第一程序被装载后,分为两个段分别映射到两个虚存区域,代码段往往是只可读的,数据段是可读写的,权限不同避免混淆,第二分段利于适应如今大多CPU的数据缓存和指令缓存分离的设计情况,第三,系统中运行多个相同程序副本时,对于只读的数据和指令来说它们都是一样的,除去私有的资源其他都是可以是共享的资源,因此可以节约很多内存资源,以此共享的方法节约大量空间.

[3]挖掘
在用gcc进行编译以后得到.o目标文件,可以使用objdump工具进行反汇编来查看目标文件的结构和内容等等
$objdump -h(打印基本信息) target.o
$objdump -x(打印更多基本信息) target.o
$objdump -s(将所有段内容以16进制方式打印) target.o
$objdump -d(将所有指令反汇编) target.o

===代码段===
利用objdump观察代码段的结构,虽然-s -d结果是16进制,但也可以看到text段的结构,包含了源代码里的函数指令等等,

===数据段和只读数据段===
data段保存所有已经初始化的变量,这里的大小取决于数据定义的类型和变量的数量,例如32位机中int就是4位个字节变量.
rodata段存放只读数据,一般存储程序里的只读变量(例如const修饰的变量)和字符串常量.

CPU的字节序(byte order),大端和小端区别,去决定变量的读取顺序.(0x54000000-->(从低到高位分别是)0x54,0x00,0x00,0x00)

===BSS段===
存储未定义的变量,更准确的是为其预留了空间.
编译器的自动优化里会把值为0的变量当做是没有初始化的,因为未初始化的变量都是0,所以在存储是也会因为优化而将值为0的变量放在BSS段.

===其他"段"===
rodata1 comment debug dynamic(动态链接信息) hash(符号hash表) line note strtab(字符串表) symtab(符号表) shstrtab(段名表) plt got init fini
用户可以自己自定义段名,但是不能以"."为前缀.

将二进制文件作为目标文件中的一个段:
$objcopy -I binary -O elf32-i386 -B i386 target.jpg target.o
$objdump -ht target.o

用户自己指定变量所处的"段",为了满足某些硬件的内存和IO的地址布局:
_attribute_((section(*FOO*))) int global = 42; 变量global被放在了"FOO"段里
_attribute_((section(*BAR*))) void foo()	函数foo()被放在了"BAR"段里
{
}


==ELF文件结构==
[1]文件头
$readelf -h target.o  查看ELF文件的文件头

包含ELF魔数,文件机器字节长度,数据存储方式,版本,允许平台,ABI,ELF重定位类型,硬件平台,硬件平台版本,入口地址,程序头入口和长度,段表位置及长度/数量等等.

ELF文件头结构即相关常数被定义在"/usr/include/elf.h",分为32和64位版本,例如"Elf32_Ehdr":
typedef struct{
	unsigned char e_ident[16];
	...
}Elf32_Ehdr

魔数对应e_ident[16]的16个字节,所有ELF文件的一开始都固定4个字节的内容"0x7F,0x45,0x4c,0x46",0x7F是DEL控制符的ASCII码值,后面3个分别是E,L,F这3个字母的ASCII码值,第5个字节用来确定ELF文件类型(32还是64位),第6个字节确定字节序(小端/大端),第7个字节确定ELF文件主版本号,后9个字节一般为0,用于扩展.

文件类型对应结构体中的e_type, ET_REL 1 可重定位文件; ET_EXEC 2 可执行文件; ET_DYN 3 共享目标文件(.so);

硬件平台属性对应e_machine, 常量以"EM_"开头,例如 "EM_386 3 inter_x86"

[2]段表
段表记录着段的名字,长度,位置,权限等信息,段表自己所在的位置由"ELF文件头"的e_shoff决定,
&readelf -S target.o  显示详细的段表结构,和objdump使用有差别.
Elf32_Shdr段描述符结构体:以这种数组方式存储数据,便于引用.

段名,sh_name,都是字符串,在ELF文件头的结构体成员"shstrtab"字符串表中有所有段的名字

段的类型,sh_type,以"SHT_"开头,详细种类见P100-101.

段的标志位,sh_flags, SHF_WRITE 1 可写; SHF_ALLOC 2 需要被分配空间; SHF_EXECINSTR 4 可执行,一般指代码段.

段的链接信息,sh_link,sh_info,之和段类型是链接相关的有关系,例如SHT_DYNAMIC,SHT_HASH,SHT_REL,SHT_RELA,SHT_SYMTAB,SHT_DYNSYM......sh_link表示该段使用字符串表/符号表的下标,sh_info表示重定位作用于哪一个段或者0或者操作系统相关的,对于其他类型的段这两个参数没有任何意义.

[3]重定位表
段".rel.text",sh_type为SHT_REL,针对".text"代码段的重定位表.

[4]字符串表
例如strtab和shstrtab段,都是用这种"偏移"的方式来引用字符串,e_shstrndx就表示"段shstrtab"在当前所在段表中的"下标"数值.
可以由ELF文件头得到段表和段表字符串表的位置.


==链接的接口"符号"==
链接的本质:目标文件之间的对"符号"(函数和变量)的互相引用.
链接主要关注"符号"的耦合,主要关注是目标文件定义和引用的全局"符号".

===ELF符号表结构===




























